{"ast":null,"code":"// // src/services/GeminiService.js\n// class GeminiService {\n//     static async queryGemini(query) {\n//       // Implement your API request logic here\n//       try {\n//         const response = await fetch(`https://api.gemini.com/query/v1?q=${encodeURIComponent(query)}`, {\n//           headers: {\n//             'Authorization': 'Bearer AIzaSyBIJOPH26-9JVs6rw8801a4IGyB65ZUtQQ',\n//             'Content-Type': 'application/json'\n//           }\n//         });\n\n//         if (!response.ok) {\n//           throw new Error('Network response was not ok');\n//         }\n\n//         const data = await response.json();\n//         return data.result;\n//       } catch (error) {\n//         console.error('Error querying Gemini:', error);\n//         return 'Sorry, I encountered an error while processing your request.';\n//       }\n//     }\n\n//     static async handleWarningOrError(query) {\n//       // Implement logic for handling warnings or errors\n//       // Example: return specific response based on query\n//       return 'Here is how we handle warnings and errors...';\n//     }\n//   }\n\n//   export default GeminiService;\n\nconst {\n  GoogleGenerativeAI\n} = require(\"@google/generative-ai\");\n\n// Access your API key as an environment variable (see \"Set up your API key\" above)\nconst genAI = new GoogleGenerativeAI(process.env.API_KEY);\nasync function run() {\n  // The Gemini 1.5 models are versatile and work with both text-only and multimodal prompts\n  const model = genAI.getGenerativeModel({\n    model: \"gemini-1.5-flash\"\n  });\n  const prompt = \"Write a story about a magic backpack.\";\n  const result = await model.generateContent(prompt);\n  const response = await result.response;\n  const text = response.text();\n  console.log(text);\n}\nrun();","map":{"version":3,"names":["GoogleGenerativeAI","require","genAI","process","env","API_KEY","run","model","getGenerativeModel","prompt","result","generateContent","response","text","console","log"],"sources":["C:/Users/ADMIN/Desktop/Sparrowthon_Spot_AIChatbot/chatbot-demo/src/services/GeminiService.js"],"sourcesContent":["// // src/services/GeminiService.js\r\n// class GeminiService {\r\n//     static async queryGemini(query) {\r\n//       // Implement your API request logic here\r\n//       try {\r\n//         const response = await fetch(`https://api.gemini.com/query/v1?q=${encodeURIComponent(query)}`, {\r\n//           headers: {\r\n//             'Authorization': 'Bearer AIzaSyBIJOPH26-9JVs6rw8801a4IGyB65ZUtQQ',\r\n//             'Content-Type': 'application/json'\r\n//           }\r\n//         });\r\n  \r\n//         if (!response.ok) {\r\n//           throw new Error('Network response was not ok');\r\n//         }\r\n  \r\n//         const data = await response.json();\r\n//         return data.result;\r\n//       } catch (error) {\r\n//         console.error('Error querying Gemini:', error);\r\n//         return 'Sorry, I encountered an error while processing your request.';\r\n//       }\r\n//     }\r\n  \r\n//     static async handleWarningOrError(query) {\r\n//       // Implement logic for handling warnings or errors\r\n//       // Example: return specific response based on query\r\n//       return 'Here is how we handle warnings and errors...';\r\n//     }\r\n//   }\r\n  \r\n//   export default GeminiService;\r\n\r\nconst { GoogleGenerativeAI } = require(\"@google/generative-ai\");\r\n\r\n// Access your API key as an environment variable (see \"Set up your API key\" above)\r\nconst genAI = new GoogleGenerativeAI(process.env.API_KEY);\r\n\r\nasync function run() {\r\n  // The Gemini 1.5 models are versatile and work with both text-only and multimodal prompts\r\n  const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\"});\r\n\r\n  const prompt = \"Write a story about a magic backpack.\"\r\n\r\n  const result = await model.generateContent(prompt);\r\n  const response = await result.response;\r\n  const text = response.text();\r\n  console.log(text);\r\n}\r\n\r\nrun();"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,MAAM;EAAEA;AAAmB,CAAC,GAAGC,OAAO,CAAC,uBAAuB,CAAC;;AAE/D;AACA,MAAMC,KAAK,GAAG,IAAIF,kBAAkB,CAACG,OAAO,CAACC,GAAG,CAACC,OAAO,CAAC;AAEzD,eAAeC,GAAGA,CAAA,EAAG;EACnB;EACA,MAAMC,KAAK,GAAGL,KAAK,CAACM,kBAAkB,CAAC;IAAED,KAAK,EAAE;EAAkB,CAAC,CAAC;EAEpE,MAAME,MAAM,GAAG,uCAAuC;EAEtD,MAAMC,MAAM,GAAG,MAAMH,KAAK,CAACI,eAAe,CAACF,MAAM,CAAC;EAClD,MAAMG,QAAQ,GAAG,MAAMF,MAAM,CAACE,QAAQ;EACtC,MAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAI,CAAC,CAAC;EAC5BC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;AACnB;AAEAP,GAAG,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
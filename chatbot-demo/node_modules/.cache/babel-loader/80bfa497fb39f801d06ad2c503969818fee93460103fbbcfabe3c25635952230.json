{"ast":null,"code":"const {\n  GoogleGenerativeAI\n} = require('@google/generative-ai');\nconst genAI = new GoogleGenerativeAI('AIzaSyBIJOPH26-9JVs6rw8801a4IGyB65ZUtQQ'); // Use environment variable for API key\n\nconst sparrowInfo = `This is some information about Sparrow. It provides powerful API management capabilities.`;\nasync function getModel(modelName) {\n  try {\n    const model = await genAI.getGenerativeModel({\n      model: modelName\n    });\n    return model;\n  } catch (error) {\n    console.error('Error getting model:', error.message);\n    throw error;\n  }\n}\nasync function generateContent(inputText, modelName) {\n  try {\n    const model = await getModel(modelName);\n    const chat = await model.startChat({\n      history: [sparrowInfo]\n    });\n    const result = await chat.sendMessage(inputText);\n    return await result.response.text();\n  } catch (error) {\n    console.error('Error generating content:', error.message);\n    throw error;\n  }\n}\nmodule.exports = {\n  generateContent\n};","map":{"version":3,"names":["GoogleGenerativeAI","require","genAI","sparrowInfo","getModel","modelName","model","getGenerativeModel","error","console","message","generateContent","inputText","chat","startChat","history","result","sendMessage","response","text","module","exports"],"sources":["C:/Users/ADMIN/Desktop/Sparrowthon_Spot_AIChatbot/chatbot-demo/src/services/GeminiService.js"],"sourcesContent":["const { GoogleGenerativeAI } = require('@google/generative-ai');\r\n\r\nconst genAI = new GoogleGenerativeAI('AIzaSyBIJOPH26-9JVs6rw8801a4IGyB65ZUtQQ'); // Use environment variable for API key\r\n\r\nconst sparrowInfo = `This is some information about Sparrow. It provides powerful API management capabilities.`;\r\n\r\nasync function getModel(modelName) {\r\n  try {\r\n    const model = await genAI.getGenerativeModel({ model: modelName });\r\n    return model;\r\n  } catch (error) {\r\n    console.error('Error getting model:', error.message);\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function generateContent(inputText, modelName) {\r\n  try {\r\n    const model = await getModel(modelName);\r\n    const chat = await model.startChat({ history: [sparrowInfo] });\r\n    const result = await chat.sendMessage(inputText);\r\n    return await result.response.text();\r\n  } catch (error) {\r\n    console.error('Error generating content:', error.message);\r\n    throw error;\r\n  }\r\n}\r\n\r\nmodule.exports = { generateContent };\r\n\r\n"],"mappings":"AAAA,MAAM;EAAEA;AAAmB,CAAC,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AAE/D,MAAMC,KAAK,GAAG,IAAIF,kBAAkB,CAAC,yCAAyC,CAAC,CAAC,CAAC;;AAEjF,MAAMG,WAAW,GAAG,2FAA2F;AAE/G,eAAeC,QAAQA,CAACC,SAAS,EAAE;EACjC,IAAI;IACF,MAAMC,KAAK,GAAG,MAAMJ,KAAK,CAACK,kBAAkB,CAAC;MAAED,KAAK,EAAED;IAAU,CAAC,CAAC;IAClE,OAAOC,KAAK;EACd,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACE,OAAO,CAAC;IACpD,MAAMF,KAAK;EACb;AACF;AAEA,eAAeG,eAAeA,CAACC,SAAS,EAAEP,SAAS,EAAE;EACnD,IAAI;IACF,MAAMC,KAAK,GAAG,MAAMF,QAAQ,CAACC,SAAS,CAAC;IACvC,MAAMQ,IAAI,GAAG,MAAMP,KAAK,CAACQ,SAAS,CAAC;MAAEC,OAAO,EAAE,CAACZ,WAAW;IAAE,CAAC,CAAC;IAC9D,MAAMa,MAAM,GAAG,MAAMH,IAAI,CAACI,WAAW,CAACL,SAAS,CAAC;IAChD,OAAO,MAAMI,MAAM,CAACE,QAAQ,CAACC,IAAI,CAAC,CAAC;EACrC,CAAC,CAAC,OAAOX,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAACE,OAAO,CAAC;IACzD,MAAMF,KAAK;EACb;AACF;AAEAY,MAAM,CAACC,OAAO,GAAG;EAAEV;AAAgB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
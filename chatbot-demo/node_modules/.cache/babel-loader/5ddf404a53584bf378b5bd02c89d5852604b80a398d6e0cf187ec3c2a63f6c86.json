{"ast":null,"code":"// const { GoogleGenerativeAI } = require('@google/generative-ai');\n// const readline = require('readline');\n\n// // Access your API key as an environment variable (see \"Set up your API key\" above)\n// const genAI = new GoogleGenerativeAI('AIzaSyBIJOPH26-9JVs6rw8801a4IGyB65ZUtQQ');\n\n// async function main() {\n//   const model = await genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });\n//   const chat = await model.startChat({ history: [] });\n\n//   const rl = readline.createInterface({\n//     input: process.stdin,\n//     output: process.stdout,\n//     prompt: 'You: '\n//   });\n//   rl.prompt();\n\n//   rl.on('line', async (line) => {\n//     const userInput = line.trim();\n\n//     if (userInput.toLowerCase() === 'exit') {\n//       rl.close();\n//       return;\n//     }\n\n//     try {\n//       const result = await chat.sendMessage(userInput);\n//       console.log(`Bot: ${await result.response.text()}`);\n//     } catch (error) {\n//       console.error('Error generating content:', error.message);\n//     }\n\n//     rl.prompt();\n//   }).on('close', () => {\n//     console.log('Session ended.');\n//     process.exit(0);\n//   });\n// }\n\n// main().catch(console.error);\n\nconst {\n  GoogleGenerativeAI\n} = require('@google/generative-ai');\nconst genAI = new GoogleGenerativeAI('AIzaSyBIJOPH26-9JVs6rw8801a4IGyB65ZUtQQ'); // Use environment variable for API key\n\nasync function getModel(modelName) {\n  try {\n    const model = await genAI.getGenerativeModel({\n      model: modelName\n    });\n    return model;\n  } catch (error) {\n    console.error('Error getting model:', error.message);\n    throw error;\n  }\n}\nasync function generateContent(inputText, modelName) {\n  try {\n    const model = await getModel(modelName);\n    const chat = await model.startChat({\n      history: []\n    });\n    const result = await chat.sendMessage(inputText);\n    return await result.response.text();\n  } catch (error) {\n    console.error('Error generating content:', error.message);\n    throw error;\n  }\n}\nmodule.exports = {\n  generateContent\n};","map":{"version":3,"names":["GoogleGenerativeAI","require","genAI","getModel","modelName","model","getGenerativeModel","error","console","message","generateContent","inputText","chat","startChat","history","result","sendMessage","response","text","module","exports"],"sources":["C:/Users/ADMIN/Desktop/Sparrowthon_Spot_AIChatbot/chatbot-demo/src/services/GeminiService.js"],"sourcesContent":["\r\n// const { GoogleGenerativeAI } = require('@google/generative-ai');\r\n// const readline = require('readline');\r\n\r\n// // Access your API key as an environment variable (see \"Set up your API key\" above)\r\n// const genAI = new GoogleGenerativeAI('AIzaSyBIJOPH26-9JVs6rw8801a4IGyB65ZUtQQ');\r\n\r\n// async function main() {\r\n//   const model = await genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });\r\n//   const chat = await model.startChat({ history: [] });\r\n\r\n//   const rl = readline.createInterface({\r\n//     input: process.stdin,\r\n//     output: process.stdout,\r\n//     prompt: 'You: '\r\n//   });\r\n//   rl.prompt();\r\n\r\n//   rl.on('line', async (line) => {\r\n//     const userInput = line.trim();\r\n    \r\n//     if (userInput.toLowerCase() === 'exit') {\r\n//       rl.close();\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       const result = await chat.sendMessage(userInput);\r\n//       console.log(`Bot: ${await result.response.text()}`);\r\n//     } catch (error) {\r\n//       console.error('Error generating content:', error.message);\r\n//     }\r\n\r\n//     rl.prompt();\r\n//   }).on('close', () => {\r\n//     console.log('Session ended.');\r\n//     process.exit(0);\r\n//   });\r\n// }\r\n\r\n// main().catch(console.error);\r\n\r\n\r\nconst { GoogleGenerativeAI } = require('@google/generative-ai');\r\n\r\nconst genAI = new GoogleGenerativeAI('AIzaSyBIJOPH26-9JVs6rw8801a4IGyB65ZUtQQ'); // Use environment variable for API key\r\n\r\nasync function getModel(modelName) {\r\n  try {\r\n    const model = await genAI.getGenerativeModel({ model: modelName });\r\n    return model;\r\n  } catch (error) {\r\n    console.error('Error getting model:', error.message);\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function generateContent(inputText, modelName) {\r\n  try {\r\n    const model = await getModel(modelName);\r\n    const chat = await model.startChat({ history: [] });\r\n    const result = await chat.sendMessage(inputText);\r\n    return await result.response.text();\r\n  } catch (error) {\r\n    console.error('Error generating content:', error.message);\r\n    throw error;\r\n  }\r\n}\r\n\r\nmodule.exports = { generateContent };\r\n\r\n"],"mappings":"AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,MAAM;EAAEA;AAAmB,CAAC,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AAE/D,MAAMC,KAAK,GAAG,IAAIF,kBAAkB,CAAC,yCAAyC,CAAC,CAAC,CAAC;;AAEjF,eAAeG,QAAQA,CAACC,SAAS,EAAE;EACjC,IAAI;IACF,MAAMC,KAAK,GAAG,MAAMH,KAAK,CAACI,kBAAkB,CAAC;MAAED,KAAK,EAAED;IAAU,CAAC,CAAC;IAClE,OAAOC,KAAK;EACd,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACE,OAAO,CAAC;IACpD,MAAMF,KAAK;EACb;AACF;AAEA,eAAeG,eAAeA,CAACC,SAAS,EAAEP,SAAS,EAAE;EACnD,IAAI;IACF,MAAMC,KAAK,GAAG,MAAMF,QAAQ,CAACC,SAAS,CAAC;IACvC,MAAMQ,IAAI,GAAG,MAAMP,KAAK,CAACQ,SAAS,CAAC;MAAEC,OAAO,EAAE;IAAG,CAAC,CAAC;IACnD,MAAMC,MAAM,GAAG,MAAMH,IAAI,CAACI,WAAW,CAACL,SAAS,CAAC;IAChD,OAAO,MAAMI,MAAM,CAACE,QAAQ,CAACC,IAAI,CAAC,CAAC;EACrC,CAAC,CAAC,OAAOX,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAACE,OAAO,CAAC;IACzD,MAAMF,KAAK;EACb;AACF;AAEAY,MAAM,CAACC,OAAO,GAAG;EAAEV;AAAgB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
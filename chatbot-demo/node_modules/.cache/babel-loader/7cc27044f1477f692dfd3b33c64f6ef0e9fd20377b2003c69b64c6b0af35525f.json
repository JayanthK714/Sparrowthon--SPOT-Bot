{"ast":null,"code":"// services/GeminiService.js\n\nconst GOOGLE_API_KEY = process.env.GOOGLE_API_KEY;\nconst queryGoogleAPI = async query => {\n  const response = await fetch(`https://www.googleapis.com/customsearch/v1?q=${encodeURIComponent(query)}&key=${GOOGLE_API_KEY}&cx=017576662512468239146:omuauf_lfve&q=cars&callback=hndlr`);\n  if (!response.ok) {\n    throw new Error('Network response was not ok');\n  }\n  const data = await response.json();\n  // Extract relevant information from data to form response\n  return data.items[0].snippet; // Example: Extract snippet from Google search results\n};\nconst handleWarningOrError = async inputText => {\n  // Handle special cases based on user input (e.g., error handling logic)\n  // Example: Return predefined responses for specific keywords\n  return \"I'm sorry, I can't help with that right now.\";\n};\nconst queryGemini = async inputText => {\n  try {\n    // Example: Query Google API\n    const response = await queryGoogleAPI(inputText);\n    return response;\n  } catch (error) {\n    console.error('Error querying Google API:', error.message);\n    return \"Sorry, I couldn't find any information.\";\n  }\n};\nmodule.exports = {\n  handleWarningOrError,\n  queryGemini\n};","map":{"version":3,"names":["GOOGLE_API_KEY","process","env","queryGoogleAPI","query","response","fetch","encodeURIComponent","ok","Error","data","json","items","snippet","handleWarningOrError","inputText","queryGemini","error","console","message","module","exports"],"sources":["C:/Users/ADMIN/Desktop/Sparrowthon_Spot_AIChatbot/chatbot-demo/src/services/GeminiService.js"],"sourcesContent":["// services/GeminiService.js\r\n\r\nconst GOOGLE_API_KEY = process.env.GOOGLE_API_KEY;\r\n\r\nconst queryGoogleAPI = async (query) => {\r\n  const response = await fetch(`https://www.googleapis.com/customsearch/v1?q=${encodeURIComponent(query)}&key=${GOOGLE_API_KEY}&cx=017576662512468239146:omuauf_lfve&q=cars&callback=hndlr`);\r\n  \r\n  if (!response.ok) {\r\n    throw new Error('Network response was not ok');\r\n  }\r\n\r\n  const data = await response.json();\r\n  // Extract relevant information from data to form response\r\n  return data.items[0].snippet; // Example: Extract snippet from Google search results\r\n};\r\n\r\nconst handleWarningOrError = async (inputText) => {\r\n  // Handle special cases based on user input (e.g., error handling logic)\r\n  // Example: Return predefined responses for specific keywords\r\n  return \"I'm sorry, I can't help with that right now.\";\r\n};\r\n\r\nconst queryGemini = async (inputText) => {\r\n  try {\r\n    // Example: Query Google API\r\n    const response = await queryGoogleAPI(inputText);\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Error querying Google API:', error.message);\r\n    return \"Sorry, I couldn't find any information.\";\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  handleWarningOrError,\r\n  queryGemini,\r\n};\r\n"],"mappings":"AAAA;;AAEA,MAAMA,cAAc,GAAGC,OAAO,CAACC,GAAG,CAACF,cAAc;AAEjD,MAAMG,cAAc,GAAG,MAAOC,KAAK,IAAK;EACtC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gDAAgDC,kBAAkB,CAACH,KAAK,CAAC,QAAQJ,cAAc,6DAA6D,CAAC;EAE1L,IAAI,CAACK,QAAQ,CAACG,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;EAChD;EAEA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;EAClC;EACA,OAAOD,IAAI,CAACE,KAAK,CAAC,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;AAChC,CAAC;AAED,MAAMC,oBAAoB,GAAG,MAAOC,SAAS,IAAK;EAChD;EACA;EACA,OAAO,8CAA8C;AACvD,CAAC;AAED,MAAMC,WAAW,GAAG,MAAOD,SAAS,IAAK;EACvC,IAAI;IACF;IACA,MAAMV,QAAQ,GAAG,MAAMF,cAAc,CAACY,SAAS,CAAC;IAChD,OAAOV,QAAQ;EACjB,CAAC,CAAC,OAAOY,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAACE,OAAO,CAAC;IAC1D,OAAO,yCAAyC;EAClD;AACF,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAG;EACfP,oBAAoB;EACpBE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
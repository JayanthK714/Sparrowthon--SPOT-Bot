{"ast":null,"code":"const {\n  GoogleGenerativeAI\n} = require('@google/generative-ai');\nconst readline = require('readline');\n\n// Access your API key as an environment variable (see \"Set up your API key\" above)\nconst genAI = new GoogleGenerativeAI('AIzaSyBIJOPH26-9JVs6rw8801a4IGyB65ZUtQQ');\nasync function main() {\n  const model = await genAI.getGenerativeModel({\n    model: 'gemini-1.5-flash'\n  });\n  const chat = await model.startChat({\n    history: []\n  });\n  const rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n    prompt: 'You: '\n  });\n  rl.prompt();\n  rl.on('line', async line => {\n    const userInput = line.trim();\n    if (userInput.toLowerCase() === 'exit') {\n      rl.close();\n      return;\n    }\n    try {\n      const result = await chat.sendMessage(userInput);\n      console.log(`Bot: ${await result.response.text()}`);\n    } catch (error) {\n      console.error('Error generating content:', error.message);\n    }\n    rl.prompt();\n  }).on('close', () => {\n    console.log('Session ended.');\n    process.exit(0);\n  });\n}\nmain().catch(console.error);","map":{"version":3,"names":["GoogleGenerativeAI","require","readline","genAI","main","model","getGenerativeModel","chat","startChat","history","rl","createInterface","input","process","stdin","output","stdout","prompt","on","line","userInput","trim","toLowerCase","close","result","sendMessage","console","log","response","text","error","message","exit","catch"],"sources":["C:/Users/ADMIN/Desktop/Sparrowthon_Spot_AIChatbot/chatbot-demo/src/services/GeminiService.js"],"sourcesContent":["\r\nconst { GoogleGenerativeAI } = require('@google/generative-ai');\r\nconst readline = require('readline');\r\n\r\n// Access your API key as an environment variable (see \"Set up your API key\" above)\r\nconst genAI = new GoogleGenerativeAI('AIzaSyBIJOPH26-9JVs6rw8801a4IGyB65ZUtQQ');\r\n\r\nasync function main() {\r\n  const model = await genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });\r\n  const chat = await model.startChat({ history: [] });\r\n\r\n  const rl = readline.createInterface({\r\n    input: process.stdin,\r\n    output: process.stdout,\r\n    prompt: 'You: '\r\n  });\r\n  rl.prompt();\r\n\r\n  rl.on('line', async (line) => {\r\n    const userInput = line.trim();\r\n    \r\n    if (userInput.toLowerCase() === 'exit') {\r\n      rl.close();\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const result = await chat.sendMessage(userInput);\r\n      console.log(`Bot: ${await result.response.text()}`);\r\n    } catch (error) {\r\n      console.error('Error generating content:', error.message);\r\n    }\r\n\r\n    rl.prompt();\r\n  }).on('close', () => {\r\n    console.log('Session ended.');\r\n    process.exit(0);\r\n  });\r\n}\r\n\r\nmain().catch(console.error);"],"mappings":"AACA,MAAM;EAAEA;AAAmB,CAAC,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AAC/D,MAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAU,CAAC;;AAEpC;AACA,MAAME,KAAK,GAAG,IAAIH,kBAAkB,CAAC,yCAAyC,CAAC;AAE/E,eAAeI,IAAIA,CAAA,EAAG;EACpB,MAAMC,KAAK,GAAG,MAAMF,KAAK,CAACG,kBAAkB,CAAC;IAAED,KAAK,EAAE;EAAmB,CAAC,CAAC;EAC3E,MAAME,IAAI,GAAG,MAAMF,KAAK,CAACG,SAAS,CAAC;IAAEC,OAAO,EAAE;EAAG,CAAC,CAAC;EAEnD,MAAMC,EAAE,GAAGR,QAAQ,CAACS,eAAe,CAAC;IAClCC,KAAK,EAAEC,OAAO,CAACC,KAAK;IACpBC,MAAM,EAAEF,OAAO,CAACG,MAAM;IACtBC,MAAM,EAAE;EACV,CAAC,CAAC;EACFP,EAAE,CAACO,MAAM,CAAC,CAAC;EAEXP,EAAE,CAACQ,EAAE,CAAC,MAAM,EAAE,MAAOC,IAAI,IAAK;IAC5B,MAAMC,SAAS,GAAGD,IAAI,CAACE,IAAI,CAAC,CAAC;IAE7B,IAAID,SAAS,CAACE,WAAW,CAAC,CAAC,KAAK,MAAM,EAAE;MACtCZ,EAAE,CAACa,KAAK,CAAC,CAAC;MACV;IACF;IAEA,IAAI;MACF,MAAMC,MAAM,GAAG,MAAMjB,IAAI,CAACkB,WAAW,CAACL,SAAS,CAAC;MAChDM,OAAO,CAACC,GAAG,CAAC,QAAQ,MAAMH,MAAM,CAACI,QAAQ,CAACC,IAAI,CAAC,CAAC,EAAE,CAAC;IACrD,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAACC,OAAO,CAAC;IAC3D;IAEArB,EAAE,CAACO,MAAM,CAAC,CAAC;EACb,CAAC,CAAC,CAACC,EAAE,CAAC,OAAO,EAAE,MAAM;IACnBQ,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;IAC7Bd,OAAO,CAACmB,IAAI,CAAC,CAAC,CAAC;EACjB,CAAC,CAAC;AACJ;AAEA5B,IAAI,CAAC,CAAC,CAAC6B,KAAK,CAACP,OAAO,CAACI,KAAK,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// const { GoogleGenerativeAI } = require(\"@google/generative-ai\");\n// const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY);\n\n// const getGenerativeModel = (modelName) => {\n//   return genAI.getGenerativeModel({ model: modelName });\n// };\n\n// const generateContent = async (prompt, modelName) => {\n//   try {\n//     const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\"});\n//     const result = await model.generateContent(prompt);\n//     const response = await result.response.text(); // Access text directly from response\n//     return response;\n//   } catch (error) {\n//     console.error('Error generating content:', error.message);\n//     throw new Error('Failed to generate content');\n//   }\n// };\n\n// module.exports = {\n//   generateContent,\n// };\n\nconst {\n  GoogleGenerativeAI\n} = require('@google/generative-ai');\n\n// Access your API key as an environment variable (see \"Set up your API key\" above)\nconst genAI = new GoogleGenerativeAI(process.env.APIKEY);\nasync function main() {\n  const model = await genAI.getGenerativeModel({\n    model: 'gemini-1.5-flash'\n  });\n  const chat = await model.startChat({\n    history: []\n  });\n  const result1 = await chat.sendMessage('who is jayanth k.');\n  console.log(await result1.response.text());\n  const result2 = await chat.sendMessage('Okay, how about a more detailed explanation to a high schooler?');\n  console.log(await result2.response.text());\n}\nmain().catch(console.error);","map":{"version":3,"names":["GoogleGenerativeAI","require","genAI","process","env","APIKEY","main","model","getGenerativeModel","chat","startChat","history","result1","sendMessage","console","log","response","text","result2","catch","error"],"sources":["C:/Users/ADMIN/Desktop/Sparrowthon_Spot_AIChatbot/chatbot-demo/src/services/GeminiService.js"],"sourcesContent":["// const { GoogleGenerativeAI } = require(\"@google/generative-ai\");\r\n// const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY);\r\n\r\n// const getGenerativeModel = (modelName) => {\r\n//   return genAI.getGenerativeModel({ model: modelName });\r\n// };\r\n\r\n// const generateContent = async (prompt, modelName) => {\r\n//   try {\r\n//     const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\"});\r\n//     const result = await model.generateContent(prompt);\r\n//     const response = await result.response.text(); // Access text directly from response\r\n//     return response;\r\n//   } catch (error) {\r\n//     console.error('Error generating content:', error.message);\r\n//     throw new Error('Failed to generate content');\r\n//   }\r\n// };\r\n\r\n// module.exports = {\r\n//   generateContent,\r\n// };\r\n\r\nconst { GoogleGenerativeAI } = require('@google/generative-ai');\r\n\r\n// Access your API key as an environment variable (see \"Set up your API key\" above)\r\nconst genAI = new GoogleGenerativeAI(process.env.APIKEY);\r\n\r\nasync function main() {\r\n  const model = await genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });\r\n  const chat = await model.startChat({ history: [] });\r\n\r\n  const result1 = await chat.sendMessage(\r\n    'who is jayanth k.'\r\n  );\r\n  console.log(await result1.response.text());\r\n\r\n  const result2 = await chat.sendMessage(\r\n    'Okay, how about a more detailed explanation to a high schooler?'\r\n  );\r\n  console.log(await result2.response.text());\r\n}\r\n\r\nmain().catch(console.error);\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,MAAM;EAAEA;AAAmB,CAAC,GAAGC,OAAO,CAAC,uBAAuB,CAAC;;AAE/D;AACA,MAAMC,KAAK,GAAG,IAAIF,kBAAkB,CAACG,OAAO,CAACC,GAAG,CAACC,MAAM,CAAC;AAExD,eAAeC,IAAIA,CAAA,EAAG;EACpB,MAAMC,KAAK,GAAG,MAAML,KAAK,CAACM,kBAAkB,CAAC;IAAED,KAAK,EAAE;EAAmB,CAAC,CAAC;EAC3E,MAAME,IAAI,GAAG,MAAMF,KAAK,CAACG,SAAS,CAAC;IAAEC,OAAO,EAAE;EAAG,CAAC,CAAC;EAEnD,MAAMC,OAAO,GAAG,MAAMH,IAAI,CAACI,WAAW,CACpC,mBACF,CAAC;EACDC,OAAO,CAACC,GAAG,CAAC,MAAMH,OAAO,CAACI,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC;EAE1C,MAAMC,OAAO,GAAG,MAAMT,IAAI,CAACI,WAAW,CACpC,iEACF,CAAC;EACDC,OAAO,CAACC,GAAG,CAAC,MAAMG,OAAO,CAACF,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC;AAC5C;AAEAX,IAAI,CAAC,CAAC,CAACa,KAAK,CAACL,OAAO,CAACM,KAAK,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}